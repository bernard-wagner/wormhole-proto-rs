// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gossip/v1/gossip.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.GossipMessage)
pub struct GossipMessage {
    // message oneof groups
    pub message: ::std::option::Option<gossip_message::Message>,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.GossipMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GossipMessage {
    fn default() -> &'a GossipMessage {
        <GossipMessage as ::protobuf::Message>::default_instance()
    }
}

impl GossipMessage {
    pub fn new() -> GossipMessage {
        ::std::default::Default::default()
    }

    // .gossip.v1.SignedObservation signed_observation = 2;

    pub fn signed_observation(&self) -> &SignedObservation {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedObservation(ref v)) => v,
            _ => <SignedObservation as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_signed_observation(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_signed_observation(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedObservation(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_signed_observation(&mut self, v: SignedObservation) {
        self.message = ::std::option::Option::Some(gossip_message::Message::SignedObservation(v))
    }

    // Mutable pointer to the field.
    pub fn mut_signed_observation(&mut self) -> &mut SignedObservation {
        if let ::std::option::Option::Some(gossip_message::Message::SignedObservation(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(gossip_message::Message::SignedObservation(SignedObservation::new()));
        }
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedObservation(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_signed_observation(&mut self) -> SignedObservation {
        if self.has_signed_observation() {
            match self.message.take() {
                ::std::option::Option::Some(gossip_message::Message::SignedObservation(v)) => v,
                _ => panic!(),
            }
        } else {
            SignedObservation::new()
        }
    }

    // .gossip.v1.SignedHeartbeat signed_heartbeat = 3;

    pub fn signed_heartbeat(&self) -> &SignedHeartbeat {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedHeartbeat(ref v)) => v,
            _ => <SignedHeartbeat as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_signed_heartbeat(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_signed_heartbeat(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedHeartbeat(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_signed_heartbeat(&mut self, v: SignedHeartbeat) {
        self.message = ::std::option::Option::Some(gossip_message::Message::SignedHeartbeat(v))
    }

    // Mutable pointer to the field.
    pub fn mut_signed_heartbeat(&mut self) -> &mut SignedHeartbeat {
        if let ::std::option::Option::Some(gossip_message::Message::SignedHeartbeat(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(gossip_message::Message::SignedHeartbeat(SignedHeartbeat::new()));
        }
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedHeartbeat(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_signed_heartbeat(&mut self) -> SignedHeartbeat {
        if self.has_signed_heartbeat() {
            match self.message.take() {
                ::std::option::Option::Some(gossip_message::Message::SignedHeartbeat(v)) => v,
                _ => panic!(),
            }
        } else {
            SignedHeartbeat::new()
        }
    }

    // .gossip.v1.SignedVAAWithQuorum signed_vaa_with_quorum = 4;

    pub fn signed_vaa_with_quorum(&self) -> &SignedVAAWithQuorum {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedVaaWithQuorum(ref v)) => v,
            _ => <SignedVAAWithQuorum as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_signed_vaa_with_quorum(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_signed_vaa_with_quorum(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedVaaWithQuorum(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_signed_vaa_with_quorum(&mut self, v: SignedVAAWithQuorum) {
        self.message = ::std::option::Option::Some(gossip_message::Message::SignedVaaWithQuorum(v))
    }

    // Mutable pointer to the field.
    pub fn mut_signed_vaa_with_quorum(&mut self) -> &mut SignedVAAWithQuorum {
        if let ::std::option::Option::Some(gossip_message::Message::SignedVaaWithQuorum(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(gossip_message::Message::SignedVaaWithQuorum(SignedVAAWithQuorum::new()));
        }
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedVaaWithQuorum(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_signed_vaa_with_quorum(&mut self) -> SignedVAAWithQuorum {
        if self.has_signed_vaa_with_quorum() {
            match self.message.take() {
                ::std::option::Option::Some(gossip_message::Message::SignedVaaWithQuorum(v)) => v,
                _ => panic!(),
            }
        } else {
            SignedVAAWithQuorum::new()
        }
    }

    // .gossip.v1.SignedObservationRequest signed_observation_request = 5;

    pub fn signed_observation_request(&self) -> &SignedObservationRequest {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedObservationRequest(ref v)) => v,
            _ => <SignedObservationRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_signed_observation_request(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_signed_observation_request(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedObservationRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_signed_observation_request(&mut self, v: SignedObservationRequest) {
        self.message = ::std::option::Option::Some(gossip_message::Message::SignedObservationRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_signed_observation_request(&mut self) -> &mut SignedObservationRequest {
        if let ::std::option::Option::Some(gossip_message::Message::SignedObservationRequest(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(gossip_message::Message::SignedObservationRequest(SignedObservationRequest::new()));
        }
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedObservationRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_signed_observation_request(&mut self) -> SignedObservationRequest {
        if self.has_signed_observation_request() {
            match self.message.take() {
                ::std::option::Option::Some(gossip_message::Message::SignedObservationRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            SignedObservationRequest::new()
        }
    }

    // .gossip.v1.SignedBatchObservation signed_batch_observation = 6;

    pub fn signed_batch_observation(&self) -> &SignedBatchObservation {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedBatchObservation(ref v)) => v,
            _ => <SignedBatchObservation as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_signed_batch_observation(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_signed_batch_observation(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedBatchObservation(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_signed_batch_observation(&mut self, v: SignedBatchObservation) {
        self.message = ::std::option::Option::Some(gossip_message::Message::SignedBatchObservation(v))
    }

    // Mutable pointer to the field.
    pub fn mut_signed_batch_observation(&mut self) -> &mut SignedBatchObservation {
        if let ::std::option::Option::Some(gossip_message::Message::SignedBatchObservation(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(gossip_message::Message::SignedBatchObservation(SignedBatchObservation::new()));
        }
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedBatchObservation(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_signed_batch_observation(&mut self) -> SignedBatchObservation {
        if self.has_signed_batch_observation() {
            match self.message.take() {
                ::std::option::Option::Some(gossip_message::Message::SignedBatchObservation(v)) => v,
                _ => panic!(),
            }
        } else {
            SignedBatchObservation::new()
        }
    }

    // .gossip.v1.SignedBatchVAAWithQuorum signed_batch_vaa_with_quorum = 7;

    pub fn signed_batch_vaa_with_quorum(&self) -> &SignedBatchVAAWithQuorum {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedBatchVaaWithQuorum(ref v)) => v,
            _ => <SignedBatchVAAWithQuorum as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_signed_batch_vaa_with_quorum(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_signed_batch_vaa_with_quorum(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedBatchVaaWithQuorum(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_signed_batch_vaa_with_quorum(&mut self, v: SignedBatchVAAWithQuorum) {
        self.message = ::std::option::Option::Some(gossip_message::Message::SignedBatchVaaWithQuorum(v))
    }

    // Mutable pointer to the field.
    pub fn mut_signed_batch_vaa_with_quorum(&mut self) -> &mut SignedBatchVAAWithQuorum {
        if let ::std::option::Option::Some(gossip_message::Message::SignedBatchVaaWithQuorum(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(gossip_message::Message::SignedBatchVaaWithQuorum(SignedBatchVAAWithQuorum::new()));
        }
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedBatchVaaWithQuorum(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_signed_batch_vaa_with_quorum(&mut self) -> SignedBatchVAAWithQuorum {
        if self.has_signed_batch_vaa_with_quorum() {
            match self.message.take() {
                ::std::option::Option::Some(gossip_message::Message::SignedBatchVaaWithQuorum(v)) => v,
                _ => panic!(),
            }
        } else {
            SignedBatchVAAWithQuorum::new()
        }
    }

    // .gossip.v1.SignedChainGovernorConfig signed_chain_governor_config = 8;

    pub fn signed_chain_governor_config(&self) -> &SignedChainGovernorConfig {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorConfig(ref v)) => v,
            _ => <SignedChainGovernorConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_signed_chain_governor_config(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_signed_chain_governor_config(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorConfig(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_signed_chain_governor_config(&mut self, v: SignedChainGovernorConfig) {
        self.message = ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorConfig(v))
    }

    // Mutable pointer to the field.
    pub fn mut_signed_chain_governor_config(&mut self) -> &mut SignedChainGovernorConfig {
        if let ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorConfig(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorConfig(SignedChainGovernorConfig::new()));
        }
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorConfig(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_signed_chain_governor_config(&mut self) -> SignedChainGovernorConfig {
        if self.has_signed_chain_governor_config() {
            match self.message.take() {
                ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorConfig(v)) => v,
                _ => panic!(),
            }
        } else {
            SignedChainGovernorConfig::new()
        }
    }

    // .gossip.v1.SignedChainGovernorStatus signed_chain_governor_status = 9;

    pub fn signed_chain_governor_status(&self) -> &SignedChainGovernorStatus {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorStatus(ref v)) => v,
            _ => <SignedChainGovernorStatus as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_signed_chain_governor_status(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_signed_chain_governor_status(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorStatus(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_signed_chain_governor_status(&mut self, v: SignedChainGovernorStatus) {
        self.message = ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorStatus(v))
    }

    // Mutable pointer to the field.
    pub fn mut_signed_chain_governor_status(&mut self) -> &mut SignedChainGovernorStatus {
        if let ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorStatus(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorStatus(SignedChainGovernorStatus::new()));
        }
        match self.message {
            ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorStatus(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_signed_chain_governor_status(&mut self) -> SignedChainGovernorStatus {
        if self.has_signed_chain_governor_status() {
            match self.message.take() {
                ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorStatus(v)) => v,
                _ => panic!(),
            }
        } else {
            SignedChainGovernorStatus::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SignedObservation>(
            "signed_observation",
            GossipMessage::has_signed_observation,
            GossipMessage::signed_observation,
            GossipMessage::mut_signed_observation,
            GossipMessage::set_signed_observation,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SignedHeartbeat>(
            "signed_heartbeat",
            GossipMessage::has_signed_heartbeat,
            GossipMessage::signed_heartbeat,
            GossipMessage::mut_signed_heartbeat,
            GossipMessage::set_signed_heartbeat,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SignedVAAWithQuorum>(
            "signed_vaa_with_quorum",
            GossipMessage::has_signed_vaa_with_quorum,
            GossipMessage::signed_vaa_with_quorum,
            GossipMessage::mut_signed_vaa_with_quorum,
            GossipMessage::set_signed_vaa_with_quorum,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SignedObservationRequest>(
            "signed_observation_request",
            GossipMessage::has_signed_observation_request,
            GossipMessage::signed_observation_request,
            GossipMessage::mut_signed_observation_request,
            GossipMessage::set_signed_observation_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SignedBatchObservation>(
            "signed_batch_observation",
            GossipMessage::has_signed_batch_observation,
            GossipMessage::signed_batch_observation,
            GossipMessage::mut_signed_batch_observation,
            GossipMessage::set_signed_batch_observation,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SignedBatchVAAWithQuorum>(
            "signed_batch_vaa_with_quorum",
            GossipMessage::has_signed_batch_vaa_with_quorum,
            GossipMessage::signed_batch_vaa_with_quorum,
            GossipMessage::mut_signed_batch_vaa_with_quorum,
            GossipMessage::set_signed_batch_vaa_with_quorum,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SignedChainGovernorConfig>(
            "signed_chain_governor_config",
            GossipMessage::has_signed_chain_governor_config,
            GossipMessage::signed_chain_governor_config,
            GossipMessage::mut_signed_chain_governor_config,
            GossipMessage::set_signed_chain_governor_config,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SignedChainGovernorStatus>(
            "signed_chain_governor_status",
            GossipMessage::has_signed_chain_governor_status,
            GossipMessage::signed_chain_governor_status,
            GossipMessage::mut_signed_chain_governor_status,
            GossipMessage::set_signed_chain_governor_status,
        ));
        oneofs.push(gossip_message::Message::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GossipMessage>(
            "GossipMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GossipMessage {
    const NAME: &'static str = "GossipMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.message = ::std::option::Option::Some(gossip_message::Message::SignedObservation(is.read_message()?));
                },
                26 => {
                    self.message = ::std::option::Option::Some(gossip_message::Message::SignedHeartbeat(is.read_message()?));
                },
                34 => {
                    self.message = ::std::option::Option::Some(gossip_message::Message::SignedVaaWithQuorum(is.read_message()?));
                },
                42 => {
                    self.message = ::std::option::Option::Some(gossip_message::Message::SignedObservationRequest(is.read_message()?));
                },
                50 => {
                    self.message = ::std::option::Option::Some(gossip_message::Message::SignedBatchObservation(is.read_message()?));
                },
                58 => {
                    self.message = ::std::option::Option::Some(gossip_message::Message::SignedBatchVaaWithQuorum(is.read_message()?));
                },
                66 => {
                    self.message = ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorConfig(is.read_message()?));
                },
                74 => {
                    self.message = ::std::option::Option::Some(gossip_message::Message::SignedChainGovernorStatus(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &gossip_message::Message::SignedObservation(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gossip_message::Message::SignedHeartbeat(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gossip_message::Message::SignedVaaWithQuorum(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gossip_message::Message::SignedObservationRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gossip_message::Message::SignedBatchObservation(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gossip_message::Message::SignedBatchVaaWithQuorum(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gossip_message::Message::SignedChainGovernorConfig(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gossip_message::Message::SignedChainGovernorStatus(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &gossip_message::Message::SignedObservation(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &gossip_message::Message::SignedHeartbeat(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &gossip_message::Message::SignedVaaWithQuorum(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &gossip_message::Message::SignedObservationRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &gossip_message::Message::SignedBatchObservation(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &gossip_message::Message::SignedBatchVaaWithQuorum(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &gossip_message::Message::SignedChainGovernorConfig(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &gossip_message::Message::SignedChainGovernorStatus(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GossipMessage {
        GossipMessage::new()
    }

    fn clear(&mut self) {
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GossipMessage {
        static instance: GossipMessage = GossipMessage {
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GossipMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GossipMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GossipMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GossipMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GossipMessage`
pub mod gossip_message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:gossip.v1.GossipMessage.message)
    pub enum Message {
        // @@protoc_insertion_point(oneof_field:gossip.v1.GossipMessage.signed_observation)
        SignedObservation(super::SignedObservation),
        // @@protoc_insertion_point(oneof_field:gossip.v1.GossipMessage.signed_heartbeat)
        SignedHeartbeat(super::SignedHeartbeat),
        // @@protoc_insertion_point(oneof_field:gossip.v1.GossipMessage.signed_vaa_with_quorum)
        SignedVaaWithQuorum(super::SignedVAAWithQuorum),
        // @@protoc_insertion_point(oneof_field:gossip.v1.GossipMessage.signed_observation_request)
        SignedObservationRequest(super::SignedObservationRequest),
        // @@protoc_insertion_point(oneof_field:gossip.v1.GossipMessage.signed_batch_observation)
        SignedBatchObservation(super::SignedBatchObservation),
        // @@protoc_insertion_point(oneof_field:gossip.v1.GossipMessage.signed_batch_vaa_with_quorum)
        SignedBatchVaaWithQuorum(super::SignedBatchVAAWithQuorum),
        // @@protoc_insertion_point(oneof_field:gossip.v1.GossipMessage.signed_chain_governor_config)
        SignedChainGovernorConfig(super::SignedChainGovernorConfig),
        // @@protoc_insertion_point(oneof_field:gossip.v1.GossipMessage.signed_chain_governor_status)
        SignedChainGovernorStatus(super::SignedChainGovernorStatus),
    }

    impl ::protobuf::Oneof for Message {
    }

    impl ::protobuf::OneofFull for Message {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GossipMessage as ::protobuf::MessageFull>::descriptor().oneof_by_name("message").unwrap()).clone()
        }
    }

    impl Message {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Message>("message")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.SignedHeartbeat)
pub struct SignedHeartbeat {
    // message fields
    // @@protoc_insertion_point(field:gossip.v1.SignedHeartbeat.heartbeat)
    pub heartbeat: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedHeartbeat.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedHeartbeat.guardian_addr)
    pub guardian_addr: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.SignedHeartbeat.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedHeartbeat {
    fn default() -> &'a SignedHeartbeat {
        <SignedHeartbeat as ::protobuf::Message>::default_instance()
    }
}

impl SignedHeartbeat {
    pub fn new() -> SignedHeartbeat {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "heartbeat",
            |m: &SignedHeartbeat| { &m.heartbeat },
            |m: &mut SignedHeartbeat| { &mut m.heartbeat },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &SignedHeartbeat| { &m.signature },
            |m: &mut SignedHeartbeat| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "guardian_addr",
            |m: &SignedHeartbeat| { &m.guardian_addr },
            |m: &mut SignedHeartbeat| { &mut m.guardian_addr },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedHeartbeat>(
            "SignedHeartbeat",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedHeartbeat {
    const NAME: &'static str = "SignedHeartbeat";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.heartbeat = is.read_bytes()?;
                },
                18 => {
                    self.signature = is.read_bytes()?;
                },
                26 => {
                    self.guardian_addr = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.heartbeat.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.heartbeat);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        if !self.guardian_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.guardian_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.heartbeat.is_empty() {
            os.write_bytes(1, &self.heartbeat)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        if !self.guardian_addr.is_empty() {
            os.write_bytes(3, &self.guardian_addr)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedHeartbeat {
        SignedHeartbeat::new()
    }

    fn clear(&mut self) {
        self.heartbeat.clear();
        self.signature.clear();
        self.guardian_addr.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedHeartbeat {
        static instance: SignedHeartbeat = SignedHeartbeat {
            heartbeat: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            guardian_addr: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedHeartbeat {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedHeartbeat").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedHeartbeat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedHeartbeat {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.Heartbeat)
pub struct Heartbeat {
    // message fields
    // @@protoc_insertion_point(field:gossip.v1.Heartbeat.node_name)
    pub node_name: ::std::string::String,
    // @@protoc_insertion_point(field:gossip.v1.Heartbeat.counter)
    pub counter: i64,
    // @@protoc_insertion_point(field:gossip.v1.Heartbeat.timestamp)
    pub timestamp: i64,
    // @@protoc_insertion_point(field:gossip.v1.Heartbeat.networks)
    pub networks: ::std::vec::Vec<heartbeat::Network>,
    // @@protoc_insertion_point(field:gossip.v1.Heartbeat.version)
    pub version: ::std::string::String,
    // @@protoc_insertion_point(field:gossip.v1.Heartbeat.guardian_addr)
    pub guardian_addr: ::std::string::String,
    // @@protoc_insertion_point(field:gossip.v1.Heartbeat.boot_timestamp)
    pub boot_timestamp: i64,
    // @@protoc_insertion_point(field:gossip.v1.Heartbeat.features)
    pub features: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:gossip.v1.Heartbeat.p2p_node_id)
    pub p2p_node_id: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.Heartbeat.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Heartbeat {
    fn default() -> &'a Heartbeat {
        <Heartbeat as ::protobuf::Message>::default_instance()
    }
}

impl Heartbeat {
    pub fn new() -> Heartbeat {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_name",
            |m: &Heartbeat| { &m.node_name },
            |m: &mut Heartbeat| { &mut m.node_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "counter",
            |m: &Heartbeat| { &m.counter },
            |m: &mut Heartbeat| { &mut m.counter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &Heartbeat| { &m.timestamp },
            |m: &mut Heartbeat| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "networks",
            |m: &Heartbeat| { &m.networks },
            |m: &mut Heartbeat| { &mut m.networks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Heartbeat| { &m.version },
            |m: &mut Heartbeat| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "guardian_addr",
            |m: &Heartbeat| { &m.guardian_addr },
            |m: &mut Heartbeat| { &mut m.guardian_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "boot_timestamp",
            |m: &Heartbeat| { &m.boot_timestamp },
            |m: &mut Heartbeat| { &mut m.boot_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "features",
            |m: &Heartbeat| { &m.features },
            |m: &mut Heartbeat| { &mut m.features },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "p2p_node_id",
            |m: &Heartbeat| { &m.p2p_node_id },
            |m: &mut Heartbeat| { &mut m.p2p_node_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Heartbeat>(
            "Heartbeat",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Heartbeat {
    const NAME: &'static str = "Heartbeat";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.node_name = is.read_string()?;
                },
                16 => {
                    self.counter = is.read_int64()?;
                },
                24 => {
                    self.timestamp = is.read_int64()?;
                },
                34 => {
                    self.networks.push(is.read_message()?);
                },
                42 => {
                    self.version = is.read_string()?;
                },
                50 => {
                    self.guardian_addr = is.read_string()?;
                },
                56 => {
                    self.boot_timestamp = is.read_int64()?;
                },
                66 => {
                    self.features.push(is.read_string()?);
                },
                74 => {
                    self.p2p_node_id = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.node_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_name);
        }
        if self.counter != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.counter);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.timestamp);
        }
        for value in &self.networks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.version);
        }
        if !self.guardian_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.guardian_addr);
        }
        if self.boot_timestamp != 0 {
            my_size += ::protobuf::rt::int64_size(7, self.boot_timestamp);
        }
        for value in &self.features {
            my_size += ::protobuf::rt::string_size(8, &value);
        };
        if !self.p2p_node_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.p2p_node_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.node_name.is_empty() {
            os.write_string(1, &self.node_name)?;
        }
        if self.counter != 0 {
            os.write_int64(2, self.counter)?;
        }
        if self.timestamp != 0 {
            os.write_int64(3, self.timestamp)?;
        }
        for v in &self.networks {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if !self.version.is_empty() {
            os.write_string(5, &self.version)?;
        }
        if !self.guardian_addr.is_empty() {
            os.write_string(6, &self.guardian_addr)?;
        }
        if self.boot_timestamp != 0 {
            os.write_int64(7, self.boot_timestamp)?;
        }
        for v in &self.features {
            os.write_string(8, &v)?;
        };
        if !self.p2p_node_id.is_empty() {
            os.write_bytes(9, &self.p2p_node_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Heartbeat {
        Heartbeat::new()
    }

    fn clear(&mut self) {
        self.node_name.clear();
        self.counter = 0;
        self.timestamp = 0;
        self.networks.clear();
        self.version.clear();
        self.guardian_addr.clear();
        self.boot_timestamp = 0;
        self.features.clear();
        self.p2p_node_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Heartbeat {
        static instance: Heartbeat = Heartbeat {
            node_name: ::std::string::String::new(),
            counter: 0,
            timestamp: 0,
            networks: ::std::vec::Vec::new(),
            version: ::std::string::String::new(),
            guardian_addr: ::std::string::String::new(),
            boot_timestamp: 0,
            features: ::std::vec::Vec::new(),
            p2p_node_id: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Heartbeat {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Heartbeat").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Heartbeat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Heartbeat {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Heartbeat`
pub mod heartbeat {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:gossip.v1.Heartbeat.Network)
    pub struct Network {
        // message fields
        // @@protoc_insertion_point(field:gossip.v1.Heartbeat.Network.id)
        pub id: u32,
        // @@protoc_insertion_point(field:gossip.v1.Heartbeat.Network.height)
        pub height: i64,
        // @@protoc_insertion_point(field:gossip.v1.Heartbeat.Network.contract_address)
        pub contract_address: ::std::string::String,
        // @@protoc_insertion_point(field:gossip.v1.Heartbeat.Network.error_count)
        pub error_count: u64,
        // special fields
        // @@protoc_insertion_point(special_field:gossip.v1.Heartbeat.Network.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Network {
        fn default() -> &'a Network {
            <Network as ::protobuf::Message>::default_instance()
        }
    }

    impl Network {
        pub fn new() -> Network {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "id",
                |m: &Network| { &m.id },
                |m: &mut Network| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "height",
                |m: &Network| { &m.height },
                |m: &mut Network| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "contract_address",
                |m: &Network| { &m.contract_address },
                |m: &mut Network| { &mut m.contract_address },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "error_count",
                |m: &Network| { &m.error_count },
                |m: &mut Network| { &mut m.error_count },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Network>(
                "Heartbeat.Network",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Network {
        const NAME: &'static str = "Network";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.id = is.read_uint32()?;
                    },
                    16 => {
                        self.height = is.read_int64()?;
                    },
                    26 => {
                        self.contract_address = is.read_string()?;
                    },
                    32 => {
                        self.error_count = is.read_uint64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.id != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.id);
            }
            if self.height != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.height);
            }
            if !self.contract_address.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.contract_address);
            }
            if self.error_count != 0 {
                my_size += ::protobuf::rt::uint64_size(4, self.error_count);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.id != 0 {
                os.write_uint32(1, self.id)?;
            }
            if self.height != 0 {
                os.write_int64(2, self.height)?;
            }
            if !self.contract_address.is_empty() {
                os.write_string(3, &self.contract_address)?;
            }
            if self.error_count != 0 {
                os.write_uint64(4, self.error_count)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Network {
            Network::new()
        }

        fn clear(&mut self) {
            self.id = 0;
            self.height = 0;
            self.contract_address.clear();
            self.error_count = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Network {
            static instance: Network = Network {
                id: 0,
                height: 0,
                contract_address: ::std::string::String::new(),
                error_count: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Network {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Heartbeat.Network").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Network {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Network {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.SignedObservation)
pub struct SignedObservation {
    // message fields
    // @@protoc_insertion_point(field:gossip.v1.SignedObservation.addr)
    pub addr: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedObservation.hash)
    pub hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedObservation.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedObservation.tx_hash)
    pub tx_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedObservation.message_id)
    pub message_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.SignedObservation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedObservation {
    fn default() -> &'a SignedObservation {
        <SignedObservation as ::protobuf::Message>::default_instance()
    }
}

impl SignedObservation {
    pub fn new() -> SignedObservation {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "addr",
            |m: &SignedObservation| { &m.addr },
            |m: &mut SignedObservation| { &mut m.addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &SignedObservation| { &m.hash },
            |m: &mut SignedObservation| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &SignedObservation| { &m.signature },
            |m: &mut SignedObservation| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_hash",
            |m: &SignedObservation| { &m.tx_hash },
            |m: &mut SignedObservation| { &mut m.tx_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message_id",
            |m: &SignedObservation| { &m.message_id },
            |m: &mut SignedObservation| { &mut m.message_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedObservation>(
            "SignedObservation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedObservation {
    const NAME: &'static str = "SignedObservation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.addr = is.read_bytes()?;
                },
                18 => {
                    self.hash = is.read_bytes()?;
                },
                26 => {
                    self.signature = is.read_bytes()?;
                },
                34 => {
                    self.tx_hash = is.read_bytes()?;
                },
                42 => {
                    self.message_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.addr);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signature);
        }
        if !self.tx_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.tx_hash);
        }
        if !self.message_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.message_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.addr.is_empty() {
            os.write_bytes(1, &self.addr)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(3, &self.signature)?;
        }
        if !self.tx_hash.is_empty() {
            os.write_bytes(4, &self.tx_hash)?;
        }
        if !self.message_id.is_empty() {
            os.write_string(5, &self.message_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedObservation {
        SignedObservation::new()
    }

    fn clear(&mut self) {
        self.addr.clear();
        self.hash.clear();
        self.signature.clear();
        self.tx_hash.clear();
        self.message_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedObservation {
        static instance: SignedObservation = SignedObservation {
            addr: ::std::vec::Vec::new(),
            hash: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            tx_hash: ::std::vec::Vec::new(),
            message_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedObservation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedObservation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedObservation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedObservation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.SignedVAAWithQuorum)
pub struct SignedVAAWithQuorum {
    // message fields
    // @@protoc_insertion_point(field:gossip.v1.SignedVAAWithQuorum.vaa)
    pub vaa: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.SignedVAAWithQuorum.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedVAAWithQuorum {
    fn default() -> &'a SignedVAAWithQuorum {
        <SignedVAAWithQuorum as ::protobuf::Message>::default_instance()
    }
}

impl SignedVAAWithQuorum {
    pub fn new() -> SignedVAAWithQuorum {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vaa",
            |m: &SignedVAAWithQuorum| { &m.vaa },
            |m: &mut SignedVAAWithQuorum| { &mut m.vaa },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedVAAWithQuorum>(
            "SignedVAAWithQuorum",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedVAAWithQuorum {
    const NAME: &'static str = "SignedVAAWithQuorum";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.vaa = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.vaa.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.vaa);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.vaa.is_empty() {
            os.write_bytes(1, &self.vaa)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedVAAWithQuorum {
        SignedVAAWithQuorum::new()
    }

    fn clear(&mut self) {
        self.vaa.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedVAAWithQuorum {
        static instance: SignedVAAWithQuorum = SignedVAAWithQuorum {
            vaa: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedVAAWithQuorum {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedVAAWithQuorum").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedVAAWithQuorum {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedVAAWithQuorum {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.SignedObservationRequest)
pub struct SignedObservationRequest {
    // message fields
    // @@protoc_insertion_point(field:gossip.v1.SignedObservationRequest.observation_request)
    pub observation_request: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedObservationRequest.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedObservationRequest.guardian_addr)
    pub guardian_addr: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.SignedObservationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedObservationRequest {
    fn default() -> &'a SignedObservationRequest {
        <SignedObservationRequest as ::protobuf::Message>::default_instance()
    }
}

impl SignedObservationRequest {
    pub fn new() -> SignedObservationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "observation_request",
            |m: &SignedObservationRequest| { &m.observation_request },
            |m: &mut SignedObservationRequest| { &mut m.observation_request },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &SignedObservationRequest| { &m.signature },
            |m: &mut SignedObservationRequest| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "guardian_addr",
            |m: &SignedObservationRequest| { &m.guardian_addr },
            |m: &mut SignedObservationRequest| { &mut m.guardian_addr },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedObservationRequest>(
            "SignedObservationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedObservationRequest {
    const NAME: &'static str = "SignedObservationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.observation_request = is.read_bytes()?;
                },
                18 => {
                    self.signature = is.read_bytes()?;
                },
                26 => {
                    self.guardian_addr = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.observation_request.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.observation_request);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        if !self.guardian_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.guardian_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.observation_request.is_empty() {
            os.write_bytes(1, &self.observation_request)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        if !self.guardian_addr.is_empty() {
            os.write_bytes(3, &self.guardian_addr)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedObservationRequest {
        SignedObservationRequest::new()
    }

    fn clear(&mut self) {
        self.observation_request.clear();
        self.signature.clear();
        self.guardian_addr.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedObservationRequest {
        static instance: SignedObservationRequest = SignedObservationRequest {
            observation_request: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            guardian_addr: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedObservationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedObservationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedObservationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedObservationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.ObservationRequest)
pub struct ObservationRequest {
    // message fields
    // @@protoc_insertion_point(field:gossip.v1.ObservationRequest.chain_id)
    pub chain_id: u32,
    // @@protoc_insertion_point(field:gossip.v1.ObservationRequest.tx_hash)
    pub tx_hash: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.ObservationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ObservationRequest {
    fn default() -> &'a ObservationRequest {
        <ObservationRequest as ::protobuf::Message>::default_instance()
    }
}

impl ObservationRequest {
    pub fn new() -> ObservationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chain_id",
            |m: &ObservationRequest| { &m.chain_id },
            |m: &mut ObservationRequest| { &mut m.chain_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_hash",
            |m: &ObservationRequest| { &m.tx_hash },
            |m: &mut ObservationRequest| { &mut m.tx_hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ObservationRequest>(
            "ObservationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ObservationRequest {
    const NAME: &'static str = "ObservationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.chain_id = is.read_uint32()?;
                },
                18 => {
                    self.tx_hash = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.chain_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.chain_id);
        }
        if !self.tx_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.tx_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.chain_id != 0 {
            os.write_uint32(1, self.chain_id)?;
        }
        if !self.tx_hash.is_empty() {
            os.write_bytes(2, &self.tx_hash)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ObservationRequest {
        ObservationRequest::new()
    }

    fn clear(&mut self) {
        self.chain_id = 0;
        self.tx_hash.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ObservationRequest {
        static instance: ObservationRequest = ObservationRequest {
            chain_id: 0,
            tx_hash: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ObservationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ObservationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ObservationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ObservationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.SignedBatchObservation)
pub struct SignedBatchObservation {
    // message fields
    // @@protoc_insertion_point(field:gossip.v1.SignedBatchObservation.addr)
    pub addr: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedBatchObservation.hash)
    pub hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedBatchObservation.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedBatchObservation.tx_id)
    pub tx_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedBatchObservation.chain_id)
    pub chain_id: u32,
    // @@protoc_insertion_point(field:gossip.v1.SignedBatchObservation.nonce)
    pub nonce: u32,
    // @@protoc_insertion_point(field:gossip.v1.SignedBatchObservation.batch_id)
    pub batch_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.SignedBatchObservation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedBatchObservation {
    fn default() -> &'a SignedBatchObservation {
        <SignedBatchObservation as ::protobuf::Message>::default_instance()
    }
}

impl SignedBatchObservation {
    pub fn new() -> SignedBatchObservation {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "addr",
            |m: &SignedBatchObservation| { &m.addr },
            |m: &mut SignedBatchObservation| { &mut m.addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &SignedBatchObservation| { &m.hash },
            |m: &mut SignedBatchObservation| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &SignedBatchObservation| { &m.signature },
            |m: &mut SignedBatchObservation| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_id",
            |m: &SignedBatchObservation| { &m.tx_id },
            |m: &mut SignedBatchObservation| { &mut m.tx_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chain_id",
            |m: &SignedBatchObservation| { &m.chain_id },
            |m: &mut SignedBatchObservation| { &mut m.chain_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nonce",
            |m: &SignedBatchObservation| { &m.nonce },
            |m: &mut SignedBatchObservation| { &mut m.nonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "batch_id",
            |m: &SignedBatchObservation| { &m.batch_id },
            |m: &mut SignedBatchObservation| { &mut m.batch_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedBatchObservation>(
            "SignedBatchObservation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedBatchObservation {
    const NAME: &'static str = "SignedBatchObservation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.addr = is.read_bytes()?;
                },
                18 => {
                    self.hash = is.read_bytes()?;
                },
                26 => {
                    self.signature = is.read_bytes()?;
                },
                34 => {
                    self.tx_id = is.read_bytes()?;
                },
                40 => {
                    self.chain_id = is.read_uint32()?;
                },
                48 => {
                    self.nonce = is.read_uint32()?;
                },
                58 => {
                    self.batch_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.addr);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signature);
        }
        if !self.tx_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.tx_id);
        }
        if self.chain_id != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.chain_id);
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.nonce);
        }
        if !self.batch_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.batch_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.addr.is_empty() {
            os.write_bytes(1, &self.addr)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(3, &self.signature)?;
        }
        if !self.tx_id.is_empty() {
            os.write_bytes(4, &self.tx_id)?;
        }
        if self.chain_id != 0 {
            os.write_uint32(5, self.chain_id)?;
        }
        if self.nonce != 0 {
            os.write_uint32(6, self.nonce)?;
        }
        if !self.batch_id.is_empty() {
            os.write_string(7, &self.batch_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedBatchObservation {
        SignedBatchObservation::new()
    }

    fn clear(&mut self) {
        self.addr.clear();
        self.hash.clear();
        self.signature.clear();
        self.tx_id.clear();
        self.chain_id = 0;
        self.nonce = 0;
        self.batch_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedBatchObservation {
        static instance: SignedBatchObservation = SignedBatchObservation {
            addr: ::std::vec::Vec::new(),
            hash: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            tx_id: ::std::vec::Vec::new(),
            chain_id: 0,
            nonce: 0,
            batch_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedBatchObservation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedBatchObservation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedBatchObservation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedBatchObservation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.SignedBatchVAAWithQuorum)
pub struct SignedBatchVAAWithQuorum {
    // message fields
    // @@protoc_insertion_point(field:gossip.v1.SignedBatchVAAWithQuorum.batch_vaa)
    pub batch_vaa: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedBatchVAAWithQuorum.chain_id)
    pub chain_id: u32,
    // @@protoc_insertion_point(field:gossip.v1.SignedBatchVAAWithQuorum.tx_id)
    pub tx_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedBatchVAAWithQuorum.nonce)
    pub nonce: u32,
    // @@protoc_insertion_point(field:gossip.v1.SignedBatchVAAWithQuorum.batch_id)
    pub batch_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.SignedBatchVAAWithQuorum.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedBatchVAAWithQuorum {
    fn default() -> &'a SignedBatchVAAWithQuorum {
        <SignedBatchVAAWithQuorum as ::protobuf::Message>::default_instance()
    }
}

impl SignedBatchVAAWithQuorum {
    pub fn new() -> SignedBatchVAAWithQuorum {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "batch_vaa",
            |m: &SignedBatchVAAWithQuorum| { &m.batch_vaa },
            |m: &mut SignedBatchVAAWithQuorum| { &mut m.batch_vaa },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chain_id",
            |m: &SignedBatchVAAWithQuorum| { &m.chain_id },
            |m: &mut SignedBatchVAAWithQuorum| { &mut m.chain_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_id",
            |m: &SignedBatchVAAWithQuorum| { &m.tx_id },
            |m: &mut SignedBatchVAAWithQuorum| { &mut m.tx_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nonce",
            |m: &SignedBatchVAAWithQuorum| { &m.nonce },
            |m: &mut SignedBatchVAAWithQuorum| { &mut m.nonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "batch_id",
            |m: &SignedBatchVAAWithQuorum| { &m.batch_id },
            |m: &mut SignedBatchVAAWithQuorum| { &mut m.batch_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedBatchVAAWithQuorum>(
            "SignedBatchVAAWithQuorum",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedBatchVAAWithQuorum {
    const NAME: &'static str = "SignedBatchVAAWithQuorum";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.batch_vaa = is.read_bytes()?;
                },
                16 => {
                    self.chain_id = is.read_uint32()?;
                },
                26 => {
                    self.tx_id = is.read_bytes()?;
                },
                32 => {
                    self.nonce = is.read_uint32()?;
                },
                42 => {
                    self.batch_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.batch_vaa.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.batch_vaa);
        }
        if self.chain_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.chain_id);
        }
        if !self.tx_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.tx_id);
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.nonce);
        }
        if !self.batch_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.batch_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.batch_vaa.is_empty() {
            os.write_bytes(1, &self.batch_vaa)?;
        }
        if self.chain_id != 0 {
            os.write_uint32(2, self.chain_id)?;
        }
        if !self.tx_id.is_empty() {
            os.write_bytes(3, &self.tx_id)?;
        }
        if self.nonce != 0 {
            os.write_uint32(4, self.nonce)?;
        }
        if !self.batch_id.is_empty() {
            os.write_string(5, &self.batch_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedBatchVAAWithQuorum {
        SignedBatchVAAWithQuorum::new()
    }

    fn clear(&mut self) {
        self.batch_vaa.clear();
        self.chain_id = 0;
        self.tx_id.clear();
        self.nonce = 0;
        self.batch_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedBatchVAAWithQuorum {
        static instance: SignedBatchVAAWithQuorum = SignedBatchVAAWithQuorum {
            batch_vaa: ::std::vec::Vec::new(),
            chain_id: 0,
            tx_id: ::std::vec::Vec::new(),
            nonce: 0,
            batch_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedBatchVAAWithQuorum {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedBatchVAAWithQuorum").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedBatchVAAWithQuorum {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedBatchVAAWithQuorum {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.SignedChainGovernorConfig)
pub struct SignedChainGovernorConfig {
    // message fields
    // @@protoc_insertion_point(field:gossip.v1.SignedChainGovernorConfig.config)
    pub config: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedChainGovernorConfig.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedChainGovernorConfig.guardian_addr)
    pub guardian_addr: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.SignedChainGovernorConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedChainGovernorConfig {
    fn default() -> &'a SignedChainGovernorConfig {
        <SignedChainGovernorConfig as ::protobuf::Message>::default_instance()
    }
}

impl SignedChainGovernorConfig {
    pub fn new() -> SignedChainGovernorConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "config",
            |m: &SignedChainGovernorConfig| { &m.config },
            |m: &mut SignedChainGovernorConfig| { &mut m.config },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &SignedChainGovernorConfig| { &m.signature },
            |m: &mut SignedChainGovernorConfig| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "guardian_addr",
            |m: &SignedChainGovernorConfig| { &m.guardian_addr },
            |m: &mut SignedChainGovernorConfig| { &mut m.guardian_addr },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedChainGovernorConfig>(
            "SignedChainGovernorConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedChainGovernorConfig {
    const NAME: &'static str = "SignedChainGovernorConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.config = is.read_bytes()?;
                },
                18 => {
                    self.signature = is.read_bytes()?;
                },
                26 => {
                    self.guardian_addr = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.config.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.config);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        if !self.guardian_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.guardian_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.config.is_empty() {
            os.write_bytes(1, &self.config)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        if !self.guardian_addr.is_empty() {
            os.write_bytes(3, &self.guardian_addr)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedChainGovernorConfig {
        SignedChainGovernorConfig::new()
    }

    fn clear(&mut self) {
        self.config.clear();
        self.signature.clear();
        self.guardian_addr.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedChainGovernorConfig {
        static instance: SignedChainGovernorConfig = SignedChainGovernorConfig {
            config: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            guardian_addr: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedChainGovernorConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedChainGovernorConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedChainGovernorConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedChainGovernorConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.ChainGovernorConfig)
pub struct ChainGovernorConfig {
    // message fields
    // @@protoc_insertion_point(field:gossip.v1.ChainGovernorConfig.node_name)
    pub node_name: ::std::string::String,
    // @@protoc_insertion_point(field:gossip.v1.ChainGovernorConfig.counter)
    pub counter: i64,
    // @@protoc_insertion_point(field:gossip.v1.ChainGovernorConfig.timestamp)
    pub timestamp: i64,
    // @@protoc_insertion_point(field:gossip.v1.ChainGovernorConfig.chains)
    pub chains: ::std::vec::Vec<chain_governor_config::Chain>,
    // @@protoc_insertion_point(field:gossip.v1.ChainGovernorConfig.tokens)
    pub tokens: ::std::vec::Vec<chain_governor_config::Token>,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.ChainGovernorConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChainGovernorConfig {
    fn default() -> &'a ChainGovernorConfig {
        <ChainGovernorConfig as ::protobuf::Message>::default_instance()
    }
}

impl ChainGovernorConfig {
    pub fn new() -> ChainGovernorConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_name",
            |m: &ChainGovernorConfig| { &m.node_name },
            |m: &mut ChainGovernorConfig| { &mut m.node_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "counter",
            |m: &ChainGovernorConfig| { &m.counter },
            |m: &mut ChainGovernorConfig| { &mut m.counter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &ChainGovernorConfig| { &m.timestamp },
            |m: &mut ChainGovernorConfig| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "chains",
            |m: &ChainGovernorConfig| { &m.chains },
            |m: &mut ChainGovernorConfig| { &mut m.chains },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tokens",
            |m: &ChainGovernorConfig| { &m.tokens },
            |m: &mut ChainGovernorConfig| { &mut m.tokens },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChainGovernorConfig>(
            "ChainGovernorConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChainGovernorConfig {
    const NAME: &'static str = "ChainGovernorConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.node_name = is.read_string()?;
                },
                16 => {
                    self.counter = is.read_int64()?;
                },
                24 => {
                    self.timestamp = is.read_int64()?;
                },
                34 => {
                    self.chains.push(is.read_message()?);
                },
                42 => {
                    self.tokens.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.node_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_name);
        }
        if self.counter != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.counter);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.timestamp);
        }
        for value in &self.chains {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.tokens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.node_name.is_empty() {
            os.write_string(1, &self.node_name)?;
        }
        if self.counter != 0 {
            os.write_int64(2, self.counter)?;
        }
        if self.timestamp != 0 {
            os.write_int64(3, self.timestamp)?;
        }
        for v in &self.chains {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.tokens {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChainGovernorConfig {
        ChainGovernorConfig::new()
    }

    fn clear(&mut self) {
        self.node_name.clear();
        self.counter = 0;
        self.timestamp = 0;
        self.chains.clear();
        self.tokens.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChainGovernorConfig {
        static instance: ChainGovernorConfig = ChainGovernorConfig {
            node_name: ::std::string::String::new(),
            counter: 0,
            timestamp: 0,
            chains: ::std::vec::Vec::new(),
            tokens: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChainGovernorConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChainGovernorConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChainGovernorConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainGovernorConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ChainGovernorConfig`
pub mod chain_governor_config {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:gossip.v1.ChainGovernorConfig.Chain)
    pub struct Chain {
        // message fields
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorConfig.Chain.chain_id)
        pub chain_id: u32,
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorConfig.Chain.notional_limit)
        pub notional_limit: u64,
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorConfig.Chain.big_transaction_size)
        pub big_transaction_size: u64,
        // special fields
        // @@protoc_insertion_point(special_field:gossip.v1.ChainGovernorConfig.Chain.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Chain {
        fn default() -> &'a Chain {
            <Chain as ::protobuf::Message>::default_instance()
        }
    }

    impl Chain {
        pub fn new() -> Chain {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "chain_id",
                |m: &Chain| { &m.chain_id },
                |m: &mut Chain| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "notional_limit",
                |m: &Chain| { &m.notional_limit },
                |m: &mut Chain| { &mut m.notional_limit },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "big_transaction_size",
                |m: &Chain| { &m.big_transaction_size },
                |m: &mut Chain| { &mut m.big_transaction_size },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Chain>(
                "ChainGovernorConfig.Chain",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Chain {
        const NAME: &'static str = "Chain";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.chain_id = is.read_uint32()?;
                    },
                    16 => {
                        self.notional_limit = is.read_uint64()?;
                    },
                    24 => {
                        self.big_transaction_size = is.read_uint64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.chain_id != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.chain_id);
            }
            if self.notional_limit != 0 {
                my_size += ::protobuf::rt::uint64_size(2, self.notional_limit);
            }
            if self.big_transaction_size != 0 {
                my_size += ::protobuf::rt::uint64_size(3, self.big_transaction_size);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.chain_id != 0 {
                os.write_uint32(1, self.chain_id)?;
            }
            if self.notional_limit != 0 {
                os.write_uint64(2, self.notional_limit)?;
            }
            if self.big_transaction_size != 0 {
                os.write_uint64(3, self.big_transaction_size)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Chain {
            Chain::new()
        }

        fn clear(&mut self) {
            self.chain_id = 0;
            self.notional_limit = 0;
            self.big_transaction_size = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Chain {
            static instance: Chain = Chain {
                chain_id: 0,
                notional_limit: 0,
                big_transaction_size: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Chain {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ChainGovernorConfig.Chain").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Chain {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Chain {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:gossip.v1.ChainGovernorConfig.Token)
    pub struct Token {
        // message fields
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorConfig.Token.origin_chain_id)
        pub origin_chain_id: u32,
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorConfig.Token.origin_address)
        pub origin_address: ::std::string::String,
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorConfig.Token.price)
        pub price: f32,
        // special fields
        // @@protoc_insertion_point(special_field:gossip.v1.ChainGovernorConfig.Token.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Token {
        fn default() -> &'a Token {
            <Token as ::protobuf::Message>::default_instance()
        }
    }

    impl Token {
        pub fn new() -> Token {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "origin_chain_id",
                |m: &Token| { &m.origin_chain_id },
                |m: &mut Token| { &mut m.origin_chain_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "origin_address",
                |m: &Token| { &m.origin_address },
                |m: &mut Token| { &mut m.origin_address },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "price",
                |m: &Token| { &m.price },
                |m: &mut Token| { &mut m.price },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Token>(
                "ChainGovernorConfig.Token",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Token {
        const NAME: &'static str = "Token";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.origin_chain_id = is.read_uint32()?;
                    },
                    18 => {
                        self.origin_address = is.read_string()?;
                    },
                    29 => {
                        self.price = is.read_float()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.origin_chain_id != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.origin_chain_id);
            }
            if !self.origin_address.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.origin_address);
            }
            if self.price != 0. {
                my_size += 1 + 4;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.origin_chain_id != 0 {
                os.write_uint32(1, self.origin_chain_id)?;
            }
            if !self.origin_address.is_empty() {
                os.write_string(2, &self.origin_address)?;
            }
            if self.price != 0. {
                os.write_float(3, self.price)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Token {
            Token::new()
        }

        fn clear(&mut self) {
            self.origin_chain_id = 0;
            self.origin_address.clear();
            self.price = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Token {
            static instance: Token = Token {
                origin_chain_id: 0,
                origin_address: ::std::string::String::new(),
                price: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Token {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ChainGovernorConfig.Token").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Token {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Token {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.SignedChainGovernorStatus)
pub struct SignedChainGovernorStatus {
    // message fields
    // @@protoc_insertion_point(field:gossip.v1.SignedChainGovernorStatus.status)
    pub status: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedChainGovernorStatus.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gossip.v1.SignedChainGovernorStatus.guardian_addr)
    pub guardian_addr: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.SignedChainGovernorStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedChainGovernorStatus {
    fn default() -> &'a SignedChainGovernorStatus {
        <SignedChainGovernorStatus as ::protobuf::Message>::default_instance()
    }
}

impl SignedChainGovernorStatus {
    pub fn new() -> SignedChainGovernorStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &SignedChainGovernorStatus| { &m.status },
            |m: &mut SignedChainGovernorStatus| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &SignedChainGovernorStatus| { &m.signature },
            |m: &mut SignedChainGovernorStatus| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "guardian_addr",
            |m: &SignedChainGovernorStatus| { &m.guardian_addr },
            |m: &mut SignedChainGovernorStatus| { &mut m.guardian_addr },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedChainGovernorStatus>(
            "SignedChainGovernorStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedChainGovernorStatus {
    const NAME: &'static str = "SignedChainGovernorStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.status = is.read_bytes()?;
                },
                18 => {
                    self.signature = is.read_bytes()?;
                },
                26 => {
                    self.guardian_addr = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.status);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        if !self.guardian_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.guardian_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.status.is_empty() {
            os.write_bytes(1, &self.status)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        if !self.guardian_addr.is_empty() {
            os.write_bytes(3, &self.guardian_addr)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedChainGovernorStatus {
        SignedChainGovernorStatus::new()
    }

    fn clear(&mut self) {
        self.status.clear();
        self.signature.clear();
        self.guardian_addr.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedChainGovernorStatus {
        static instance: SignedChainGovernorStatus = SignedChainGovernorStatus {
            status: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            guardian_addr: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedChainGovernorStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedChainGovernorStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedChainGovernorStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedChainGovernorStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gossip.v1.ChainGovernorStatus)
pub struct ChainGovernorStatus {
    // message fields
    // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.node_name)
    pub node_name: ::std::string::String,
    // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.counter)
    pub counter: i64,
    // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.timestamp)
    pub timestamp: i64,
    // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.chains)
    pub chains: ::std::vec::Vec<chain_governor_status::Chain>,
    // special fields
    // @@protoc_insertion_point(special_field:gossip.v1.ChainGovernorStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChainGovernorStatus {
    fn default() -> &'a ChainGovernorStatus {
        <ChainGovernorStatus as ::protobuf::Message>::default_instance()
    }
}

impl ChainGovernorStatus {
    pub fn new() -> ChainGovernorStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_name",
            |m: &ChainGovernorStatus| { &m.node_name },
            |m: &mut ChainGovernorStatus| { &mut m.node_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "counter",
            |m: &ChainGovernorStatus| { &m.counter },
            |m: &mut ChainGovernorStatus| { &mut m.counter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &ChainGovernorStatus| { &m.timestamp },
            |m: &mut ChainGovernorStatus| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "chains",
            |m: &ChainGovernorStatus| { &m.chains },
            |m: &mut ChainGovernorStatus| { &mut m.chains },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChainGovernorStatus>(
            "ChainGovernorStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChainGovernorStatus {
    const NAME: &'static str = "ChainGovernorStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.node_name = is.read_string()?;
                },
                16 => {
                    self.counter = is.read_int64()?;
                },
                24 => {
                    self.timestamp = is.read_int64()?;
                },
                34 => {
                    self.chains.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.node_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_name);
        }
        if self.counter != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.counter);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.timestamp);
        }
        for value in &self.chains {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.node_name.is_empty() {
            os.write_string(1, &self.node_name)?;
        }
        if self.counter != 0 {
            os.write_int64(2, self.counter)?;
        }
        if self.timestamp != 0 {
            os.write_int64(3, self.timestamp)?;
        }
        for v in &self.chains {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChainGovernorStatus {
        ChainGovernorStatus::new()
    }

    fn clear(&mut self) {
        self.node_name.clear();
        self.counter = 0;
        self.timestamp = 0;
        self.chains.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChainGovernorStatus {
        static instance: ChainGovernorStatus = ChainGovernorStatus {
            node_name: ::std::string::String::new(),
            counter: 0,
            timestamp: 0,
            chains: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChainGovernorStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChainGovernorStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChainGovernorStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainGovernorStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ChainGovernorStatus`
pub mod chain_governor_status {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:gossip.v1.ChainGovernorStatus.EnqueuedVAA)
    pub struct EnqueuedVAA {
        // message fields
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.EnqueuedVAA.sequence)
        pub sequence: u64,
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.EnqueuedVAA.release_time)
        pub release_time: u32,
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.EnqueuedVAA.notional_value)
        pub notional_value: u64,
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.EnqueuedVAA.tx_hash)
        pub tx_hash: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:gossip.v1.ChainGovernorStatus.EnqueuedVAA.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EnqueuedVAA {
        fn default() -> &'a EnqueuedVAA {
            <EnqueuedVAA as ::protobuf::Message>::default_instance()
        }
    }

    impl EnqueuedVAA {
        pub fn new() -> EnqueuedVAA {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "sequence",
                |m: &EnqueuedVAA| { &m.sequence },
                |m: &mut EnqueuedVAA| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "release_time",
                |m: &EnqueuedVAA| { &m.release_time },
                |m: &mut EnqueuedVAA| { &mut m.release_time },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "notional_value",
                |m: &EnqueuedVAA| { &m.notional_value },
                |m: &mut EnqueuedVAA| { &mut m.notional_value },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "tx_hash",
                |m: &EnqueuedVAA| { &m.tx_hash },
                |m: &mut EnqueuedVAA| { &mut m.tx_hash },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnqueuedVAA>(
                "ChainGovernorStatus.EnqueuedVAA",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EnqueuedVAA {
        const NAME: &'static str = "EnqueuedVAA";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.sequence = is.read_uint64()?;
                    },
                    16 => {
                        self.release_time = is.read_uint32()?;
                    },
                    24 => {
                        self.notional_value = is.read_uint64()?;
                    },
                    34 => {
                        self.tx_hash = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.sequence != 0 {
                my_size += ::protobuf::rt::uint64_size(1, self.sequence);
            }
            if self.release_time != 0 {
                my_size += ::protobuf::rt::uint32_size(2, self.release_time);
            }
            if self.notional_value != 0 {
                my_size += ::protobuf::rt::uint64_size(3, self.notional_value);
            }
            if !self.tx_hash.is_empty() {
                my_size += ::protobuf::rt::string_size(4, &self.tx_hash);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.sequence != 0 {
                os.write_uint64(1, self.sequence)?;
            }
            if self.release_time != 0 {
                os.write_uint32(2, self.release_time)?;
            }
            if self.notional_value != 0 {
                os.write_uint64(3, self.notional_value)?;
            }
            if !self.tx_hash.is_empty() {
                os.write_string(4, &self.tx_hash)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EnqueuedVAA {
            EnqueuedVAA::new()
        }

        fn clear(&mut self) {
            self.sequence = 0;
            self.release_time = 0;
            self.notional_value = 0;
            self.tx_hash.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EnqueuedVAA {
            static instance: EnqueuedVAA = EnqueuedVAA {
                sequence: 0,
                release_time: 0,
                notional_value: 0,
                tx_hash: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EnqueuedVAA {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ChainGovernorStatus.EnqueuedVAA").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EnqueuedVAA {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EnqueuedVAA {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:gossip.v1.ChainGovernorStatus.Emitter)
    pub struct Emitter {
        // message fields
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.Emitter.emitter_address)
        pub emitter_address: ::std::string::String,
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.Emitter.total_enqueued_vaas)
        pub total_enqueued_vaas: u64,
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.Emitter.enqueued_vaas)
        pub enqueued_vaas: ::std::vec::Vec<EnqueuedVAA>,
        // special fields
        // @@protoc_insertion_point(special_field:gossip.v1.ChainGovernorStatus.Emitter.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Emitter {
        fn default() -> &'a Emitter {
            <Emitter as ::protobuf::Message>::default_instance()
        }
    }

    impl Emitter {
        pub fn new() -> Emitter {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "emitter_address",
                |m: &Emitter| { &m.emitter_address },
                |m: &mut Emitter| { &mut m.emitter_address },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "total_enqueued_vaas",
                |m: &Emitter| { &m.total_enqueued_vaas },
                |m: &mut Emitter| { &mut m.total_enqueued_vaas },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "enqueued_vaas",
                |m: &Emitter| { &m.enqueued_vaas },
                |m: &mut Emitter| { &mut m.enqueued_vaas },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Emitter>(
                "ChainGovernorStatus.Emitter",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Emitter {
        const NAME: &'static str = "Emitter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.emitter_address = is.read_string()?;
                    },
                    16 => {
                        self.total_enqueued_vaas = is.read_uint64()?;
                    },
                    26 => {
                        self.enqueued_vaas.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.emitter_address.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.emitter_address);
            }
            if self.total_enqueued_vaas != 0 {
                my_size += ::protobuf::rt::uint64_size(2, self.total_enqueued_vaas);
            }
            for value in &self.enqueued_vaas {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.emitter_address.is_empty() {
                os.write_string(1, &self.emitter_address)?;
            }
            if self.total_enqueued_vaas != 0 {
                os.write_uint64(2, self.total_enqueued_vaas)?;
            }
            for v in &self.enqueued_vaas {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Emitter {
            Emitter::new()
        }

        fn clear(&mut self) {
            self.emitter_address.clear();
            self.total_enqueued_vaas = 0;
            self.enqueued_vaas.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Emitter {
            static instance: Emitter = Emitter {
                emitter_address: ::std::string::String::new(),
                total_enqueued_vaas: 0,
                enqueued_vaas: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Emitter {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ChainGovernorStatus.Emitter").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Emitter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Emitter {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:gossip.v1.ChainGovernorStatus.Chain)
    pub struct Chain {
        // message fields
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.Chain.chain_id)
        pub chain_id: u32,
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.Chain.remaining_available_notional)
        pub remaining_available_notional: u64,
        // @@protoc_insertion_point(field:gossip.v1.ChainGovernorStatus.Chain.emitters)
        pub emitters: ::std::vec::Vec<Emitter>,
        // special fields
        // @@protoc_insertion_point(special_field:gossip.v1.ChainGovernorStatus.Chain.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Chain {
        fn default() -> &'a Chain {
            <Chain as ::protobuf::Message>::default_instance()
        }
    }

    impl Chain {
        pub fn new() -> Chain {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "chain_id",
                |m: &Chain| { &m.chain_id },
                |m: &mut Chain| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "remaining_available_notional",
                |m: &Chain| { &m.remaining_available_notional },
                |m: &mut Chain| { &mut m.remaining_available_notional },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "emitters",
                |m: &Chain| { &m.emitters },
                |m: &mut Chain| { &mut m.emitters },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Chain>(
                "ChainGovernorStatus.Chain",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Chain {
        const NAME: &'static str = "Chain";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.chain_id = is.read_uint32()?;
                    },
                    16 => {
                        self.remaining_available_notional = is.read_uint64()?;
                    },
                    26 => {
                        self.emitters.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.chain_id != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.chain_id);
            }
            if self.remaining_available_notional != 0 {
                my_size += ::protobuf::rt::uint64_size(2, self.remaining_available_notional);
            }
            for value in &self.emitters {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.chain_id != 0 {
                os.write_uint32(1, self.chain_id)?;
            }
            if self.remaining_available_notional != 0 {
                os.write_uint64(2, self.remaining_available_notional)?;
            }
            for v in &self.emitters {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Chain {
            Chain::new()
        }

        fn clear(&mut self) {
            self.chain_id = 0;
            self.remaining_available_notional = 0;
            self.emitters.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Chain {
            static instance: Chain = Chain {
                chain_id: 0,
                remaining_available_notional: 0,
                emitters: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Chain {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ChainGovernorStatus.Chain").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Chain {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Chain {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16gossip/v1/gossip.proto\x12\tgossip.v1\"\x86\x06\n\rGossipMessage\
    \x12M\n\x12signed_observation\x18\x02\x20\x01(\x0b2\x1c.gossip.v1.Signed\
    ObservationH\0R\x11signedObservation\x12G\n\x10signed_heartbeat\x18\x03\
    \x20\x01(\x0b2\x1a.gossip.v1.SignedHeartbeatH\0R\x0fsignedHeartbeat\x12U\
    \n\x16signed_vaa_with_quorum\x18\x04\x20\x01(\x0b2\x1e.gossip.v1.SignedV\
    AAWithQuorumH\0R\x13signedVaaWithQuorum\x12c\n\x1asigned_observation_req\
    uest\x18\x05\x20\x01(\x0b2#.gossip.v1.SignedObservationRequestH\0R\x18si\
    gnedObservationRequest\x12]\n\x18signed_batch_observation\x18\x06\x20\
    \x01(\x0b2!.gossip.v1.SignedBatchObservationH\0R\x16signedBatchObservati\
    on\x12e\n\x1csigned_batch_vaa_with_quorum\x18\x07\x20\x01(\x0b2#.gossip.\
    v1.SignedBatchVAAWithQuorumH\0R\x18signedBatchVaaWithQuorum\x12g\n\x1csi\
    gned_chain_governor_config\x18\x08\x20\x01(\x0b2$.gossip.v1.SignedChainG\
    overnorConfigH\0R\x19signedChainGovernorConfig\x12g\n\x1csigned_chain_go\
    vernor_status\x18\t\x20\x01(\x0b2$.gossip.v1.SignedChainGovernorStatusH\
    \0R\x19signedChainGovernorStatusB\t\n\x07message\"r\n\x0fSignedHeartbeat\
    \x12\x1c\n\theartbeat\x18\x01\x20\x01(\x0cR\theartbeat\x12\x1c\n\tsignat\
    ure\x18\x02\x20\x01(\x0cR\tsignature\x12#\n\rguardian_addr\x18\x03\x20\
    \x01(\x0cR\x0cguardianAddr\"\xbb\x03\n\tHeartbeat\x12\x1b\n\tnode_name\
    \x18\x01\x20\x01(\tR\x08nodeName\x12\x18\n\x07counter\x18\x02\x20\x01(\
    \x03R\x07counter\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x03R\ttimestamp\
    \x128\n\x08networks\x18\x04\x20\x03(\x0b2\x1c.gossip.v1.Heartbeat.Networ\
    kR\x08networks\x12\x18\n\x07version\x18\x05\x20\x01(\tR\x07version\x12#\
    \n\rguardian_addr\x18\x06\x20\x01(\tR\x0cguardianAddr\x12%\n\x0eboot_tim\
    estamp\x18\x07\x20\x01(\x03R\rbootTimestamp\x12\x1a\n\x08features\x18\
    \x08\x20\x03(\tR\x08features\x12\x1e\n\x0bp2p_node_id\x18\t\x20\x01(\x0c\
    R\tp2pNodeId\x1a}\n\x07Network\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\
    \x12\x16\n\x06height\x18\x02\x20\x01(\x03R\x06height\x12)\n\x10contract_\
    address\x18\x03\x20\x01(\tR\x0fcontractAddress\x12\x1f\n\x0berror_count\
    \x18\x04\x20\x01(\x04R\nerrorCount\"\x91\x01\n\x11SignedObservation\x12\
    \x12\n\x04addr\x18\x01\x20\x01(\x0cR\x04addr\x12\x12\n\x04hash\x18\x02\
    \x20\x01(\x0cR\x04hash\x12\x1c\n\tsignature\x18\x03\x20\x01(\x0cR\tsigna\
    ture\x12\x17\n\x07tx_hash\x18\x04\x20\x01(\x0cR\x06txHash\x12\x1d\n\nmes\
    sage_id\x18\x05\x20\x01(\tR\tmessageId\"'\n\x13SignedVAAWithQuorum\x12\
    \x10\n\x03vaa\x18\x01\x20\x01(\x0cR\x03vaa\"\x8e\x01\n\x18SignedObservat\
    ionRequest\x12/\n\x13observation_request\x18\x01\x20\x01(\x0cR\x12observ\
    ationRequest\x12\x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignature\x12#\
    \n\rguardian_addr\x18\x03\x20\x01(\x0cR\x0cguardianAddr\"H\n\x12Observat\
    ionRequest\x12\x19\n\x08chain_id\x18\x01\x20\x01(\rR\x07chainId\x12\x17\
    \n\x07tx_hash\x18\x02\x20\x01(\x0cR\x06txHash\"\xbf\x01\n\x16SignedBatch\
    Observation\x12\x12\n\x04addr\x18\x01\x20\x01(\x0cR\x04addr\x12\x12\n\
    \x04hash\x18\x02\x20\x01(\x0cR\x04hash\x12\x1c\n\tsignature\x18\x03\x20\
    \x01(\x0cR\tsignature\x12\x13\n\x05tx_id\x18\x04\x20\x01(\x0cR\x04txId\
    \x12\x19\n\x08chain_id\x18\x05\x20\x01(\rR\x07chainId\x12\x14\n\x05nonce\
    \x18\x06\x20\x01(\rR\x05nonce\x12\x19\n\x08batch_id\x18\x07\x20\x01(\tR\
    \x07batchId\"\x98\x01\n\x18SignedBatchVAAWithQuorum\x12\x1b\n\tbatch_vaa\
    \x18\x01\x20\x01(\x0cR\x08batchVaa\x12\x19\n\x08chain_id\x18\x02\x20\x01\
    (\rR\x07chainId\x12\x13\n\x05tx_id\x18\x03\x20\x01(\x0cR\x04txId\x12\x14\
    \n\x05nonce\x18\x04\x20\x01(\rR\x05nonce\x12\x19\n\x08batch_id\x18\x05\
    \x20\x01(\tR\x07batchId\"v\n\x19SignedChainGovernorConfig\x12\x16\n\x06c\
    onfig\x18\x01\x20\x01(\x0cR\x06config\x12\x1c\n\tsignature\x18\x02\x20\
    \x01(\x0cR\tsignature\x12#\n\rguardian_addr\x18\x03\x20\x01(\x0cR\x0cgua\
    rdianAddr\"\xd1\x03\n\x13ChainGovernorConfig\x12\x1b\n\tnode_name\x18\
    \x01\x20\x01(\tR\x08nodeName\x12\x18\n\x07counter\x18\x02\x20\x01(\x03R\
    \x07counter\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x03R\ttimestamp\x12<\n\
    \x06chains\x18\x04\x20\x03(\x0b2$.gossip.v1.ChainGovernorConfig.ChainR\
    \x06chains\x12<\n\x06tokens\x18\x05\x20\x03(\x0b2$.gossip.v1.ChainGovern\
    orConfig.TokenR\x06tokens\x1a{\n\x05Chain\x12\x19\n\x08chain_id\x18\x01\
    \x20\x01(\rR\x07chainId\x12%\n\x0enotional_limit\x18\x02\x20\x01(\x04R\r\
    notionalLimit\x120\n\x14big_transaction_size\x18\x03\x20\x01(\x04R\x12bi\
    gTransactionSize\x1al\n\x05Token\x12&\n\x0forigin_chain_id\x18\x01\x20\
    \x01(\rR\roriginChainId\x12%\n\x0eorigin_address\x18\x02\x20\x01(\tR\ror\
    iginAddress\x12\x14\n\x05price\x18\x03\x20\x01(\x02R\x05price\"v\n\x19Si\
    gnedChainGovernorStatus\x12\x16\n\x06status\x18\x01\x20\x01(\x0cR\x06sta\
    tus\x12\x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignature\x12#\n\rguardi\
    an_addr\x18\x03\x20\x01(\x0cR\x0cguardianAddr\"\x98\x05\n\x13ChainGovern\
    orStatus\x12\x1b\n\tnode_name\x18\x01\x20\x01(\tR\x08nodeName\x12\x18\n\
    \x07counter\x18\x02\x20\x01(\x03R\x07counter\x12\x1c\n\ttimestamp\x18\
    \x03\x20\x01(\x03R\ttimestamp\x12<\n\x06chains\x18\x04\x20\x03(\x0b2$.go\
    ssip.v1.ChainGovernorStatus.ChainR\x06chains\x1a\x8c\x01\n\x0bEnqueuedVA\
    A\x12\x1a\n\x08sequence\x18\x01\x20\x01(\x04R\x08sequence\x12!\n\x0crele\
    ase_time\x18\x02\x20\x01(\rR\x0breleaseTime\x12%\n\x0enotional_value\x18\
    \x03\x20\x01(\x04R\rnotionalValue\x12\x17\n\x07tx_hash\x18\x04\x20\x01(\
    \tR\x06txHash\x1a\xb3\x01\n\x07Emitter\x12'\n\x0femitter_address\x18\x01\
    \x20\x01(\tR\x0eemitterAddress\x12.\n\x13total_enqueued_vaas\x18\x02\x20\
    \x01(\x04R\x11totalEnqueuedVaas\x12O\n\renqueued_vaas\x18\x03\x20\x03(\
    \x0b2*.gossip.v1.ChainGovernorStatus.EnqueuedVAAR\x0cenqueuedVaas\x1a\
    \xa8\x01\n\x05Chain\x12\x19\n\x08chain_id\x18\x01\x20\x01(\rR\x07chainId\
    \x12@\n\x1cremaining_available_notional\x18\x02\x20\x01(\x04R\x1aremaini\
    ngAvailableNotional\x12B\n\x08emitters\x18\x03\x20\x03(\x0b2&.gossip.v1.\
    ChainGovernorStatus.EmitterR\x08emittersBAZ?github.com/certusone/wormhol\
    e/node/pkg/proto/gossip/v1;gossipv1b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(19);
            messages.push(GossipMessage::generated_message_descriptor_data());
            messages.push(SignedHeartbeat::generated_message_descriptor_data());
            messages.push(Heartbeat::generated_message_descriptor_data());
            messages.push(SignedObservation::generated_message_descriptor_data());
            messages.push(SignedVAAWithQuorum::generated_message_descriptor_data());
            messages.push(SignedObservationRequest::generated_message_descriptor_data());
            messages.push(ObservationRequest::generated_message_descriptor_data());
            messages.push(SignedBatchObservation::generated_message_descriptor_data());
            messages.push(SignedBatchVAAWithQuorum::generated_message_descriptor_data());
            messages.push(SignedChainGovernorConfig::generated_message_descriptor_data());
            messages.push(ChainGovernorConfig::generated_message_descriptor_data());
            messages.push(SignedChainGovernorStatus::generated_message_descriptor_data());
            messages.push(ChainGovernorStatus::generated_message_descriptor_data());
            messages.push(heartbeat::Network::generated_message_descriptor_data());
            messages.push(chain_governor_config::Chain::generated_message_descriptor_data());
            messages.push(chain_governor_config::Token::generated_message_descriptor_data());
            messages.push(chain_governor_status::EnqueuedVAA::generated_message_descriptor_data());
            messages.push(chain_governor_status::Emitter::generated_message_descriptor_data());
            messages.push(chain_governor_status::Chain::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
